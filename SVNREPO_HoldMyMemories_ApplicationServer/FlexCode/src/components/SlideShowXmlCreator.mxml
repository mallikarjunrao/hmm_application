<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="handleCreationComplete()" backgroundColor="0" verticalAlign="middle" horizontalAlign="center">
	<mx:Label text="Click on an chapter to descend down to a sub-chapter and then to a gallery." fontSize="12"/>
	<mx:Label text="Select an image on the Left, click the copy button or just double click it to move it to right list." fontSize="12"/>
	<mx:Label text="You have selected {selectedData.length} images."  fontSize="14"/>
	<mx:HBox width="100%" height="90%" verticalAlign="middle" horizontalAlign="center" backgroundColor="0">
		<mx:Tree  id="tree" width="50%" height="100%" labelFunction="treeLabel" itemRenderer="renderers.GallerySelectionRenderer" itemClick="handleItemClick(event)" 
			itemDoubleClick="Alert.show('Please left click on check box to select the image')" disclosureClosedIcon="Tree_disclosureClosedIcon" disclosureOpenIcon="Tree_disclosureOpenIcon"
			doubleClickEnabled="true" styleName="tree" backgroundAlpha="0.7" color="#ffffff" backgroundColor="0x333333" fontFamily="Arial" allowDragSelection="true" dropEnabled="true" creationComplete="handleTreComplete()"/>
		<!--<mx:Button id="copyLeft" click="handleCopyLeft()" cornerRadius="0" label="Copy" toolTip="Click to move the image selected on right to the left list."/>-->
		<!--<mx:Label text="{selectedData.length}/15"/>-->
		<mx:Spacer width="10"/>
		<mx:TileList columnCount="1" id="selectedImages" width="50%" height="100%" dragDrop="handleDropEvent(event)" backgroundColor="0"
			itemRenderer="renderers.ImageRenderer"  dropEnabled="true" dragOver="handleDragOver(event)" verticalScrollPosition="{selectedImages.maxVerticalScrollPosition}"/>
		
		
	</mx:HBox>
	<mx:HBox width="100%" horizontalAlign="center">
		<mx:Button label="Back" click="handleBack()" cornerRadius="0"/>
		<mx:Button label="Save" click="handleSave()" cornerRadius="0"/>
	</mx:HBox>	
	<mx:HTTPService id="service" url="/customers/chapters_list" result="handleResult(event)" fault="handleFault(event)"/>
	<mx:Style>
		.tree
		{
			
			disclosureClosedIcon: ClassReference("Tree_disclosureClosedIcon");
			disclosureOpenIcon: ClassReference("Tree_disclosureOpenIcon");
			
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.events.CloseEvent;
			import vo.AlbumVO;
			import com.adobe.utils.DictionaryUtil;
			import model.SlideShowCreatorModel;
			import events.WizardEvent;
			import mx.core.Application;
			import flash.net.navigateToURL;
			import flash.sampler.NewObjectSample;
			import events.SlideShowEvent;
			import mx.managers.DragManager;
			import mx.events.ListEvent;
			import mx.collections.XMLListCollection;
			import vo.GalleryVO;
			import vo.SubChapterVO;
			import vo.ChapterVO;
			import vo.BaseVO;
			import vo.WebFileVO;
			import mx.containers.Canvas;
			import mx.managers.PopUpManager;
			import mx.core.IFlexDisplayObject;
			import mx.managers.CursorManager;
			import model.HmmChaptersModel;
			import mx.events.DragEvent;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			
		
		[Bindable]
		private var selectedData : ArrayCollection = new ArrayCollection();
		[Bindable]
		private var allData : ArrayCollection;	
		private var popup : IFlexDisplayObject;
		private var dataSet : XML = <list></list>;
		private var type : String;
		private var item : XML;
		private var templateName : String;
			//[Bindable]
			//private var swfName : String = Application.application.flashName;
			
			/* private function handleCreationComplete() : void
			{
				
			} */
		private function handleBack() : void
		{
			if(this.parentApplication.isFromPreview)
			 navigateToURL(new URLRequest("/myvideos/template1/"+Application.application.parameters.flashName),"_self");
			else
			 this.parentApplication.videoCreationStack.selectedIndex = 0;
		}
		
		private function handleTreComplete() : void
		{
			this.addEventListener(SlideShowEvent.CHECKBOXCHECKED,handleCheckBoxChecked);
			this.addEventListener(SlideShowEvent.CHECKBOXUNCHECKED,handleCheckBoxUnchecked)
		}
		
		private function handleCheckBoxChecked(event : SlideShowEvent) : void
		{
			//Alert.show("Check box checked");
			/* if(selectedData.length == 15)
          	{                
          		dispatchEvent(new Event("uncheck"));
          		//event.data.@selected = false;
          		invalidateDisplayList();
          		Alert.show("Maximum number of selection reached.");
          		return;
          	}
          	else
          	{ */
				item = event.data as XML;
				handleCopyLeft();
          	//}
		}
		
		private function handleCheckBoxUnchecked(event : SlideShowEvent) : void
		{
			//Alert.show("Check box unchecked");
			item = event.data as XML;
			handleRemoveLeft();
		}
		
		private function handleRemoveLeft() : void
		{
			/* var file : WebFileVO = new WebFileVO();
				file.id = item.@id;
				file.type = item.@hmmtype;
				file.icon = item.@icon;
				file.name = item.@label;
			//selectedData.removeItemAt(selectedDataIndex[file]);
			var tempSelectedData : ArrayCollection = selectedData;
			selectedData.removeAll(); //= new ArrayCollection(); */
			for(var i : int = 0 ; i < selectedData.length; i++)
			{
				if(selectedData[i].name == item.@label)
				 selectedData.removeItemAt(i);
			}
			
		}
		private function handleCopyLeft() : void
		{
			
			//var item : XML = tree.selectedItem as XML;
			if(item && item.@type == "content")
			{
				var file : WebFileVO = new WebFileVO();
				file.id = item.@id;
				file.type = item.@hmmtype;
				file.icon = item.@icon;
				file.name = item.@label;
				selectedData.addItem(file);
			}	
			else
			{
				Alert.show("Please single click on the item to descend into the tree to an item and then double click the item to add to selection."); 
			}
		}
		
		private function handleDragOver(event : DragEvent) : void
		{
			 DragManager.showFeedback(DragManager.COPY);
		}
		
		private function handleItemClick(event : ListEvent) : void
		{
			var xmlData : XML = event.itemRenderer.data as XML;
			var node:XML = tree.selectedItem as XML;     // — this will get the node
			var isOpen:Boolean = tree.isItemOpen(node);    //— this will check tree is opened or not
			tree.expandItem(node, !isOpen);                        // — this will expand the tree if not and close if opened (viceversa)
		}
		
		private function handleDropEvent(event : DragEvent) : void
		{
			if (event.dragSource.hasFormat("items"))
	              {
	              	
	                // Explicitly handle the dragDrop event.            
	                event.preventDefault();
	
	                // Since you are explicitly handling the dragDrop event,
	                // call hideDropFeedback(event) to have the drop target
	                // hide the drop indicator. 
	                // The drop indicator is created
	                // automatically for the list controls by the built-in 
	                // event handler for the dragOver event.
	                event.currentTarget.hideDropFeedback(event);
	
	                // Get drop target.
	                var dropTarget:TileList=TileList(event.currentTarget);
	                
	                // Get the dragged item from the drag initiator.
	                // The List control always writes an Array 
	                // to the dragSource object,
	                // even if there is only one item being dragged.
	                var itemsArray:Array = 
	                    event.dragSource.dataForFormat("items") as Array;
	    			var ac : ArrayCollection = selectedImages.dataProvider as ArrayCollection	
	    			
	                if(!(ac && ac.length < 15))
	              	{                
	              		Alert.show("You cannot drop this item in this gallery. Please choose the correct gallery for this item.");
	              		return;
	              	}
	    
	                // Get the drop location in the destination.
	                var dropLoc:int = dropTarget.calculateDropIndex(event);
	
	                // Add the new object to the drop target.
	                
	                
	                
	                IList(dropTarget.dataProvider).addItemAt(itemsArray[0], dropLoc);
	              }
		}
			
		private function handleCreationComplete() : void
		{
			/* var service : HTTPService = new HTTPService();
			service.url = "/myvideos/getVideoData/";
			service.addEventListener(FaultEvent.FAULT, handleFault);
			service.addEventListener(ResultEvent.RESULT, handleResult);
			service.send(); */
			templateName = this.parentApplication.templateName;
			if(!templateName)
				templateName = Application.application.parameters.flashName;
			service.send();
			CursorManager.setBusyCursor();
			popup = PopUpManager.createPopUp(this, Canvas,true);
			popup.width = 0;
			popup.height = 0;
		}
		
		public function set treeData (dataProvider : ArrayCollection) : void
			{
				
                for(var i : int = 0; i < dataProvider.length; i++)
				{
					
						var chapter : ChapterVO = dataProvider[i] as ChapterVO;
						var subchapters : Array = chapter.subchapters;
						var newNode:XML = <node></node>;
                		newNode.@label = chapter.name;
						newNode.@icon = chapter.icon;
						newNode.@id = chapter.id;
						newNode.@type = "tags";
						newNode.@select = false;
						for(var j : int = 0; j < subchapters.length; j++)
						{
							var subchapter : SubChapterVO = subchapters[j] as SubChapterVO;
							var subNode : XML = <node></node>;
							subNode.@label = subchapter.name;
							subNode.@icon = subchapter.icon;
							subNode.@id = subchapter.id;
							subNode.@type = "subchapter";
							subNode.@select = false;
							var galleries : Array = subchapter.gallery;
							for(var k : int = 0; k < galleries.length; k++)
							{
								var gal : GalleryVO = galleries[k] as GalleryVO;
								if(gal.type == "image")
								{
									var galNode : XML = <node></node>;
									galNode.@label = gal.name;
									galNode.@icon = gal.icon;
									galNode.@id = gal.id;
									galNode.@type = "gallery";
									galNode.@hmmtype = gal.type;
									galNode.@select = false;
									var contents : Array = gal.files;
									for(var l : int = 0; l < contents.length; l++)
									{
										var content : WebFileVO = contents[l];
										var contentNode = <node/>;
										contentNode.@label = content.name;
										contentNode.@icon = content.icon;
										contentNode.@id = content.id;
										contentNode.@type = "content";
										contentNode.@hmmtype = content.type;
										contentNode.@select = false;
										galNode.appendChild(contentNode); 
									}
									subNode.appendChild(galNode);	
								}
								
							}
							newNode.appendChild(subNode);
						}
						dataSet.appendChild(newNode);
						type = "tags";	
				}
				
				//randomWalk.dataProvider = dataSet;
				tree.dataProvider = new XMLListCollection(dataSet.node);
				trace(dataSet);
			}
		
		private function handleFault(event : FaultEvent) : void
		{
			trace(event.fault);
		}
		private function treeLabel(item:Object):String {
                var node:XML = XML(item);
               
                    return item.@label;
            }
			
		private function handleResult(event : ResultEvent) : void
		{
			var myModel : HmmChaptersModel = new HmmChaptersModel();
				myModel.data = event.result.root;
				//myModel.attachEventListeners(menu);
				//service.send(event.result.root);
			HmmChaptersModel.setInstance(myModel);
			selectedImages.dataProvider = selectedData;
			treeData = HmmChaptersModel.getInstance().folderList;
			
			CursorManager.removeBusyCursor();
			PopUpManager.removePopUp(popup);	
		}

		private function handleSave() : void
		{
			if(selectedData.length > 0)
			{
				//var ac : ArrayCollection = selectedImages.dataProvider as ArrayCollection;
				/* var gallerySelectPopup : IFlexDisplayObject = PopUpManager.createPopUp(this, GallerySelection, true);
				gallerySelectPopup.width = stage.width*3/4;
				gallerySelectPopup.height = stage.height*3/4;
				PopUpManager.centerPopUp(gallerySelectPopup);
				GallerySelection(gallerySelectPopup).selectedImages = ac; */
				
				SlideShowCreatorModel.getInstance().setSelectedImages = selectedImages.dataProvider as ArrayCollection;
				var wizardArray : ArrayCollection = new ArrayCollection();
				wizardArray.addItem(WizardVideoName);
				var templateName : String = this.parentApplication.templateName; 
				/* if(templateName == "familyAlbum") */
				wizardArray.addItem(WizardVideoTitle); 
				wizardArray.addItem(WizardChapterTree);
				wizardArray.addItem(WizardSelectedImages);
				var popup : IFlexDisplayObject = PopUpManager.createPopUp(this, Wizard,true);
                popup.width = stage.width*3/4;
                popup.height = stage.height*3/4;
                Wizard(popup).addEventListener(WizardEvent.WIZARD_COMPLETE, handleWizardComplete);
                Wizard(popup).dataProvider = wizardArray;
              	PopUpManager.centerPopUp(popup);
			}
			else
			{
				Alert.show("Please select some images to create a video");
			}
		}
		
		private function handleWizardComplete(event : WizardEvent) : void
		{
			  
			  FadingNotifier.setBusyState();
			  CursorManager.setBusyCursor();
			  //var valueArr : Array = DictionaryUtil.getValues(event.extra);
			  var valueArr : Dictionary = event.extra;
			  var indexArr : ArrayCollection = event.classes;
			  /* Alert.show("Wizard Name" + valueArr[WizardVideoName]);
			  Alert.show("Wizard Gallery" + valueArr[WizardChapterTree]);
			  Alert.show("Wizard Image" + valueArr[WizardSelectedImages]); */
		 	 if(valueArr[WizardChapterTree] ==null || valueArr[WizardChapterTree].@type != "gallery")
            	{
            		FadingNotifier.removeBusyState();
            		cursorManager.removeBusyCursor();
            		Alert.show("Please select a gallery first!!!");
            		return;
            	}
            	var item : XML = valueArr[WizardChapterTree] as XML;
            	var subid : String;
            	var tagid : String;
            	if( item)
            	{
            		var subchapterItem  : XML = item.parent();
            		var chapterItem: XML = subchapterItem .parent();
            		if(chapterItem)
            		{
            			 tagid = chapterItem.@id;
            		}
            		if(subchapterItem)
            		{
            			subid = subchapterItem.@id;
            		}
            	}
            	var idList : String = "";
            	var selecteImagesArr : ArrayCollection = selectedImages.dataProvider as ArrayCollection;
				if(selecteImagesArr)
				{
					for(var i : int =0; i <selecteImagesArr.length; i++) 
					{
						var obj : Object = selecteImagesArr[i];
						idList += obj.id.toString()+":";
					}	
				}
				
				var saveService : HTTPService = new HTTPService();
				saveService.addEventListener(FaultEvent.FAULT, handleFaultService);
				saveService.addEventListener(ResultEvent.RESULT, handleSaveResultService);
				saveService.url = "/csrv/slideshow/writeSlideShowXml/";
				obj = new Object();
				obj.idList = idList;
				obj.subChapterId = subid;
				obj.chapterId = tagid;
				obj.galleryId = item.@id;
				obj.id = HmmChaptersModel.getInstance().userId;
				/* if(selectedImagelist.selectedItem)
					var imagePath : String = selectedImagelist.selectedItem.icon
				else */
				if(! valueArr[WizardSelectedImages])
				{
					FadingNotifier.removeBusyState();
            		cursorManager.removeBusyCursor();
            		Alert.show("Please select a image for video icon !!!");
				   return;
				}  	
				//var explodedPath : Array = imagePath.split("/");
				if(! valueArr[WizardVideoName])
				{
					obj.name = "New Movie"
				}else
				{
					obj.name = valueArr[WizardVideoName];	
				}
				/* if(this.parentApplication.templateName == "familyAlbum")
				{ */
					/* var objTitle : Object = valueArr[WizardVideoTitle];
					obj.line1 = '"'+objTitle.line1+'"';
				    obj.line2 = '"'+objTitle.line2+'"';
				    obj.line3 = '"'+objTitle.line3+'"';
				    obj.line4 = '"'+objTitle.line4+'"';
				    obj.line5 = '"'+objTitle.line5+'"';	 */		
				  
				//}
				obj.title = valueArr[WizardVideoTitle];
				obj.icon = valueArr[WizardSelectedImages];
				obj.swf = templateName;//Application.application.parameters.flashName;//swfSelection.selectedItem.data;
				saveService.send(obj);
				
				trace(idList);
               
		}
		
		var videoID :String;
		private function handleSaveResultService(event : ResultEvent) : void
		{
			videoID = event.result.toString();
			FadingNotifier.removeBusyState();
            cursorManager.removeBusyCursor();
            Alert.show("Your movie was saved successfully...\n Do you want to preview the created video?","Movie Created",Alert.YES|Alert.NO,this,handleAlertClose);
		}
		
		private function handleAlertClose(event : CloseEvent) : void
		{
			
			if(event.detail == Alert.YES) 
			{
			 	navigateToURL(new URLRequest("/myphotos/photo_journal/"+videoID),"_self");
			 	this.enabled = false;
			}
			
		}
		private function handleFaultService(event : FaultEvent) : void
		{
			Alert.show("Unable to save user Movie");
		}
		
		]]>
	</mx:Script>
</mx:VBox>
