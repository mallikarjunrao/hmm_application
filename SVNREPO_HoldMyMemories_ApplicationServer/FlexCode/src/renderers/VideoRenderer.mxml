<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Canvas>
	<!--<mx:Image id="backImg" source="@Embed(source='assets/orange_border.png')" visible="{backImageVisibility}"/>-->
	<mx:Image id="iconImage" x="4" y="9" source="{iconUrl}" width="72" height="72" filters="{glow}" toolTip="{itemToolTip}"/>
</mx:Canvas>
	<ipeControls:IPETextInput id="folderName" editOnClick="{editFolderName}" focusOut="handleTextEntered()" enter="handleTextEntered()" text="{folderNameString}" commitOnBlur="true"  commitOnEnter="true" width="72" />
	<mx:Script>
		<![CDATA[
			import mx.core.IContainer;
			import mx.effects.Glow;
			import mx.core.Application;
			import mx.formatters.SwitchSymbolFormatter;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			import vo.WebFolderVO;
			import model.HmmChaptersModel;
			import vo.WebFileVO;
			[Bindable]
			private var folderNameString : String;
			[Bindable]
			private var iconUrl : String;
			[Bindable]
			private var backImageVisibility : Boolean = false;
			[Bindable]
			private var editFolderName : Boolean;
			[Bindable]
			private var itemToolTip : String;
			[Bindable]
			private var glow : Array;
			private var editing : Boolean;
			
			
			private function handleTextEntered() : void
			{
				
				if(!Application.application.ready)
					return; 
				data.name = folderName.text;
				var renameService : HTTPService = new HTTPService();
				switch(data.classType)
				{
					case "chapterVO" : 
					 	renameService.url = "/tags/renameTag";
						break;
					case "galleryVO":
						renameService.url = "/galleries/renameGallery";
						break;
					case "webFileVO" :
						renameService.url = "/sub_chapter/renameGalleryItem";		
						break;
					case "subChapterVO":
						renameService.url = "/sub_chapter/renameSubChapter";
						break
				}
				
				renameService.addEventListener(ResultEvent.RESULT, handleNameChangeResult);
				renameService.addEventListener(ResultEvent.RESULT, handleNameChangeResult);
				var obj : Object = new Object();
				obj.id = data.id;
				obj.name = folderName.text;
				renameService.send(obj);
				editing = false;
			}
			
			private function handleNameChangeResult(event : ResultEvent) : void
			{
				trace(event.result.toString());
			}
			
			private function handleNameChangeFault(event : FaultEvent) : void
			{
				trace(event.fault.toString());	
			}
			
			override public function set data(value:Object):void
			{
				glow = null;
				super.data = value;
				editFolderName = true;
				if(value.access == "private")
				{
					glow = [new GlowFilter(0xFF0000)];
					itemToolTip= "This item is private";
				}else
				{
					glow = [new GlowFilter(0x00FF00)];
					itemToolTip= "This item is public";
				}
				if(iconImage)
						iconImage.filters = glow;
				
				trace("Name: "+data.name+" Type: "+data);
				 if(!(value.hasOwnProperty("subchapters")||value.hasOwnProperty("files")))
				{
					iconUrl = value.icon;
					folderNameString = value.name;
					backImageVisibility = false;
					
					return;
				}else
				{
					backImageVisibility = true;
				}
				if(value.name ==null)
				{
					folderNameString = "null";	
				}else
					folderNameString = value.name.toString();	  
				//editFolderName = value.writable;
				iconUrl = value.icon;
			}
		]]>
	</mx:Script>
</mx:VBox>
