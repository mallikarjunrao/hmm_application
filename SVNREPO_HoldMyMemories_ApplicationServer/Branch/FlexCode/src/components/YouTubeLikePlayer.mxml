<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300" creationComplete="handleCreationComplete()"
	xmlns:components="components.*" verticalGap="0" horizontalGap="0" borderStyle="solid" borderThickness="1">
	<mx:Canvas width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<components:SmoothVideoDisplay id="video" height="100%" playheadUpdate="handlePlayHeadUpdate(event)" progress="handleProgress(event)"
		width="100%" volume="{volumeValue}" autoPlay="false" complete="handleComplete()"/>
		<mx:Button width="16" height="16" cornerRadius="0" upSkin="@Embed('assets/closebtn_def.png')" overSkin="@Embed('assets/closebtn_act.png')" downSkin="@Embed('assets/closebtn_def.png')" 
		click="handleCloseClick()" id="closeButton" x="{(this.width-closeButton.width-1)}"
		 y="{1}" />
	</mx:Canvas>
	
	<mx:Style>
		
		.progressSlider 
		{
			track-highlight-skin: ClassReference('components.BlankSliderTrackSkin');
			track-skin: ClassReference('components.VideoProgressTrackSkin');
			thumb-up-skin: 	ClassReference('components.VolumeSliderThumb');
			thumb-over-skin : ClassReference('components.VolumeSliderThumb');
			thumb-down-skin : ClassReference('components.VolumeSliderThumb');
		}
		
		
		
		.volumeSlider
		{
			track-highlight-skin: ClassReference('components.VolumeHighlightSkin');
			track-skin: ClassReference('components.VolumeControlTrackSkin');
			thumb-up-skin: 	ClassReference('components.VolumeSliderThumb');
			thumb-over-skin : ClassReference('components.VolumeSliderThumb');
			thumb-down-skin : ClassReference('components.VolumeSliderThumb');
			 
		}
		
		.volumeThumb
		{
			thumb-up-skin: 	Embed('assets/videoplayer/volume_thumb_def.png');
			thumb-over-skin : Embed('assets/videoplayer/volume_thumb_act.png');
			thumb-down-skin : Embed('assets/videoplayer/volume_thumb_def.png');
		}
		
		.playButton
		{
			selected-down-icon : Embed('assets/pause.png');
			selected-up-icon : Embed('assets/pause.png');
			selected-over-icon : Embed('assets/pause.png');
			up-icon : Embed('assets/play.png');
			over-icon : Embed('assets/play.png');
			down-icon : Embed('assets/play.png'); 
				fillColors: #cccccc, #666666, #333333, #000000;
   				themeColor: #ff6600; 
		}
		.fullscreen
		{
			selected-down-icon : Embed('assets/close-fullscreen.png');
			selected-up-icon : Embed('assets/close-fullscreen.png');
			selected-over-icon : Embed('assets/close-fullscreen.png');
			up-icon : Embed('assets/fullscreen.png');
			over-icon : Embed('assets/fullscreen.png');
			down-icon : Embed('assets/fullscreen.png');
				fillColors: #cccccc, #666666, #333333, #000000;
   				themeColor: #ff6600; 
		}
		.volumeButton
		{
			selected-down-icon : Embed('assets/volume.png');
			selected-up-icon : Embed('assets/volume.png');
			selected-over-icon : Embed('assets/volume.png');
			up-icon : Embed('assets/volume.png');
			over-icon : Embed('assets/volume.png');
			down-icon : Embed('assets/volume.png');
				fillColors: #cccccc, #666666, #333333, #000000;
   				themeColor: #ff6600; 
		}
		.backGround
		{
			up-skin : ClassReference("mx.skins.halo.ButtonSkin");
			over-skin : ClassReference("mx.skins.halo.ButtonSkin");
			down-skin : ClassReference("mx.skins.halo.ButtonSkin");
		}
		
	</mx:Style>
	<mx:HBox id="controlContainer" width="100%" height="25" verticalGap="1" backgroundColor="0xa9a9a9" backgroundAlpha="0.6"
		horizontalGap="1" horizontalScrollPolicy="off" rollOverEffect="{fadeIn}" rollOutEffect="{fadeOut}" 
		verticalScrollPolicy="off" verticalAlign="middle" horizontalAlign="center" >
		
		<mx:Button id="play" width="52" height="25" cornerRadius="0" styleName="playButton" 
			toggle="true" click="handlePlayClick()"/>
			
		<mx:Canvas width="100%" height="100%" id="trackContainer" horizontalScrollPolicy="off" 
			verticalScrollPolicy="off" backgroundAlpha="0" left="0" right="0" top="0" bottom="0">
			 
			<mx:ProgressBar id="downloadProgress" width="100%" height="21" mode="manual" barColor="0x404040" 
				y="{(trackContainer.height - downloadProgress.height)/2 + 7}" label="" />
				
			<mx:ProgressBar id="videoSeek" label="" mode="manual" height="21" barColor="0x909090" alpha="0.8"
				width="100%" y="{(trackContainer.height - downloadProgress.height)/2 + 7}" />
		</mx:Canvas>
		<mx:Label id="playTime" text="{formatPositionToolTip(video.playheadTime)}/{formatPositionToolTip(video.totalTime)}" color="0xffffff" fontFamily="Arial" fontSize="13" 
			y="{(controlContainer.height )/2}" horizontalCenter="true" verticalCenter="true"/>
			
		<mx:Button toggle="true" id="volume" width="31" height="25" click="handleVolumeClick()" 
			cornerRadius="0" styleName="volumeButton"/>
			
		<mx:Button id="fullscreen" width="37" height="25" cornerRadius="0" toggle="true" styleName="fullscreen" 
			click="handleFullscreenClick()"/>
	</mx:HBox>
	<mx:Fade alphaFrom="1" alphaTo="0.1" id="fadeOut" duration="800"/>
	<mx:Fade alphaFrom="0.1" alphaTo="1" id="fadeIn" duration="800"/>
	<mx:Script>
		<![CDATA[
			import mx.events.VideoEvent;
			import mx.core.Application;
			import mx.core.IFlexDisplayObject;
			import mx.controls.VSlider;
			import mx.managers.PopUpManager;
			private var volumeControl : VSlider;
			[Bindable]
			private var volumeValue : Number;
			
			public var isStandAlone : Boolean;
			private function handlePlayHeadUpdate(event : VideoEvent) : void
			{
				videoSeek.maximum = video.totalTime;
    			videoSeek.setProgress(video.playheadTime, video.totalTime);
			}
			
			private function handleComplete() : void
			{
				play.selected = !play.selected;
			}
			
			private function handleCloseClick() : void
			{
				if(video.playing)
					video.stop();
				PopUpManager.removePopUp(this);
				PopUpManager.removePopUp(volumeControl);
			}
			
			private function handleProgress(event : ProgressEvent)  :void
			{
				
				downloadProgress.setProgress( event.bytesLoaded, event.bytesTotal);
			}
			
			private function handleResize(event : FullScreenEvent) : void
			{
				if(event.fullScreen)
				{
					this.width = Capabilities.screenResolutionX;
					this.height = Capabilities.screenResolutionY;
					this.x = 0;
					this.y = 0;
					volume.selected = false;
					PopUpManager.removePopUp(volumeControl);
					closeButton.visible = false;
					
				}else
				{
					this.height = 400;
					this.width = 500;
					volume.selected = false;
					PopUpManager.removePopUp(volumeControl);
					PopUpManager.centerPopUp(this);
					if(!isStandAlone)
						closeButton.visible = true;
				}
			}
			
			private function handleCreationComplete() : void
			{
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, handleResize);
			}
			
			private function handleVolumeClick() : void
			{
				if(!volume.selected)
				{
					PopUpManager.removePopUp(volumeControl);
				}else
				{
					volumeControl = PopUpManager.createPopUp(this, VSlider, false) as VSlider;
					volumeControl.height = 100;
					volumeControl.x = this.x + volume.x + volume.width/2 - volumeControl.width/2;
					volumeControl.y = this.y + controlContainer.y - volumeControl.height;
					volumeControl.addEventListener(Event.CHANGE, handleVolumeChanged);
					volumeControl.maximum = 1;
					volumeControl.value = 0.75;	
					volumeControl.styleName = "volumeSlider";
				}
				
			}
			
			private function handleVolumeChanged(event : Event) : void
			{
				video.volume = volumeControl.value;
			}
			
			private function formatPositionToolTip(value:int):String
	        {
	             var result:String = (value % 60).toString();
		         if (result.length == 1)
		         {
		              result = Math.floor(value /60).toString() + ":0" + result;
		         }
		         else
		         {
		             result = Math.floor(value /60).toString() + ":" + result;
		         }
			     return result;
		    }
			
			public function handlePlayClick() : void
			{
				if(!play.selected)
				{
					video.pause();
				}else
				{
					video.play();
				}
			}
			
			private function handleFullscreenClick() : void
			{
				if(!fullscreen.selected)
				{
					Application.application.stage["displayState"]="normal";
					Application.application.stage.scaleMode = StageScaleMode.NO_SCALE;	
					
				}else
				{
					Application.application.stage["displayState"]="fullScreen";
					Application.application.stage.scaleMode = StageScaleMode.NO_SCALE;
					
				} 
			}
		]]>
	</mx:Script>
</mx:VBox>
