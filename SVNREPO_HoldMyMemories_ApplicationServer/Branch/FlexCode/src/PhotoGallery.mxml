<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright (c) 2006 Adobe Systems Incorporated

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->
<Application xmlns="http://www.adobe.com/2006/mxml" xmlns:local="*" width="100%" height="100%" 
	layout="absolute" backgroundColor="0x010101" creationComplete="handleCreation()" clipContent="true" 
	xmlns:components="components.*" preloader="custompreloader.PreloaderHourGlass" initialize="handleInitialize()">
	
	<!--<Binding source="sel.value" destination="shelf.selectedIndex" />
	<Binding destination="sel.value" source="shelf.selectedIndex" />
	
	<Binding source="angle.value" destination="shelf.angle" />
	<Binding source="pop.value" destination="shelf.popout" />-->
	<!--<Binding source="angle.value" destination="shelf.gradientAngle"/>-->
	<Array id="dataSet">
						
	</Array>
	<HTTPService id="dataService" url="/customers/chapters_list" result="handleDataResult(event)" fault="handleFault(event)"/>
	<HTTPService id="images"  method="POST" result="handleResult(event)" fault="handleFault(event)"/>
	<Style>
		Alert {
		    corner-radius: 8;
		    header-height: 27;
		    header-colors: #999999, #000000;
		    background-color: #000000;
		    color: #ffffff;
		    border-thickness: 4;
		    border-color: #000000;
		    panel-border-style: roundCorners;
		    shadow-distance: 4;
		    shadow-direction: bottom;
		    button-style-name: "firstButtonStyle";
		  }
		  /*x="{shelf.width- buttonBox.width}" y="{shelf.height - buttonBox.height}" */
	</Style>
	<VBox width="100%" height="100%" backgroundColor="0x010101">
	<HBox id="buttonBox" visible="{areButtonsVisible}"  enabled="false"  horizontalAlign="left" verticalAlign="middle" backgroundAlpha="0">
		<Button id="journal" click="handleJournal()" label="Journal this gallery" styleName="lastButtonStyle"  visible="true" />
		<Button id="share" click="handleShare()" label="Share this gallery" styleName="lastButtonStyle"  visible="true"/>
		<!--Button id="export" click="handleExport()" label="Export" styleName="lastButtonStyle"  visible="true" width="100%"/-->
  </HBox>
	<components:TitledDisplayShelf id="shelf"  horizontalCenter="0"  verticalCenter="0"  itemClick="handleItemClick(event)" dataField="icon" angle="28.6" 
		popout=".17" selectedIndex="{Math.floor(dataSet.length/2)}" borderColor="0x010101"  
		 dataProvider="{dataSet}" enableDoubleClick="true" enableHistory="false" width="100%" height="100%" selectOnClick="true"/>
	</VBox>	 
	<GlowFilter id="glow" color="0xACACAC"/>	
	<Label width="300" id="chapterName" x="{(shelf.width - chapterName.width)*0.5}" color="#FFFFFF" filters="{[glow]}"
		fontFamily="Arial" fontSize="19" y="{this.height*9/10}" textAlign="center" text="{seletectedObject.name}"/>
	<Script>
		<![CDATA[
			import custompreloader.PreloaderHourGlass;
			import model.HmmChaptersModel;
			import vo.GalleryVO;
			import mx.managers.PopUpManager;
			import vo.BaseVO;
			import vo.SubChapterVO;
			import vo.ChapterVO;
			import components.ExportControl;
			import mx.core.IFlexDisplayObject;
			//import components.ExternalJsJournal;
			import flash.net.navigateToURL;
			import events.CoverFlowEvent;
			import mx.events.ListEvent;
			
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var seletectedObject : Object;
			private var timer : Timer = new Timer(1700);
			private var galleryId : int;
			public var myUrl : String = new String();
			private var serviceUrl : String = "/customers/chapters_display/";
			[Bindable]
			private var areButtonsVisible : Boolean;
			private var navigateToUrl : String = "/tags/subchap_coverflow/";
			public var proxyUrl : String;
			public var proxyName : String;
			
			private function handleInitialize() : void
			{
				if(Application.application.parameters.hasOwnProperty("proxyurls"))
				{
					var proxyurls : String = Application.application.parameters.proxyurls;
					var urls : Array = proxyurls.split(",");
					for(var i : int = 0; i < urls.length; i++)
					{
						Security.loadPolicyFile(urls[i]+"/crossdomain.xml");
					}
				}
				if(Application.application.parameters.hasOwnProperty("proxyurl"))
					proxyUrl = Application.application.parameters.proxyurl;
				if(Application.application.parameters.hasOwnProperty("proxy"))
					proxyName = Application.application.parameters.proxy;
			}
			
			private function handleItemClick(event : Event) : void
			{
				var evt : ListEvent = event as ListEvent;
				//chapterName.text = shelf.selectedItem.name;
				seletectedObject = shelf.selectedItem;
			} 
			
			private function handleResult(event : ResultEvent) : void
			{
				trace(event.toString());
				//Alert.show(event.result.toString());
				if(event.result.contents && event.result.contents.content is ArrayCollection)
				{	
					var result : ArrayCollection = event.result.contents.content as ArrayCollection;
					dataSet = result.source;
				}else
				{
					if(event.result.contents)
					{
						result = new ArrayCollection([event.result.contents.content]);
						dataSet = result.source;	
					}else
					{
						Alert.show("This user has not made any of his chapters public.");
					}
					
				}
				shelf.addEventListener(CoverFlowEvent.NAVIGATE_TO, handleNavigateTo);
				if(areButtonsVisible)
					dataService.send();
					//buttonBox.visible = true;
				
			}
			
			private function handleNavigateTo(event : CoverFlowEvent) : void
			{
				trace(event.extra.id.toString());
				var urlToNav : String = navigateToUrl + event.extra.id.toString();
				var urlReq : URLRequest = new URLRequest(urlToNav);
				navigateToURL(urlReq, "_self");
				
			}
			
			private function handleTimerEvent(event : TimerEvent) : void
			{
				shelf.selectedIndex = 1;
			}
			
			private function handleFault(event : FaultEvent) : void
			{
				Alert.show(event.fault.toString());
				trace(event.toString());
			}
			
			private function handleCreation() : void
			{
			   trace(this.url);
				var swfUrl : String = this.url;
				var index : int = swfUrl.indexOf("Chapter.swf", 0);
				myUrl = swfUrl.substr(0, index);
				trace(myUrl);
				//images.url = serviceUrl;
				var serverUrl:String = Application.application.parameters.serverUrl;
				var navUrl : String = Application.application.parameters.navigateTo;
				if(serverUrl)
				{
					var explodedUrl : Array = serverUrl.split("/");
					galleryId = int(explodedUrl[explodedUrl.length-1]);	
				}
				
				var buttonsVisible : String = Application.application.parameters.buttonsVisible;
				if(buttonsVisible == "false")
				{	areButtonsVisible = false;
					buttonBox.width = 0;
					buttonBox.height = 0;
				}
				else
					areButtonsVisible = true;
				if(serverUrl)
					serviceUrl = serverUrl;
				if(navUrl)
					navigateToUrl = navUrl;
				images.url = serviceUrl;
				images.send();
				
				
			}
			
			private function handleShare() : void
			{
				
				var popUp : IFlexDisplayObject = PopUpManager.createPopUp(Application.application as DisplayObject, ExportControl, true);
				var ctrl : ExportControl = popUp as ExportControl;
				//ctrl.title = "Share with a friend.";
				ctrl.successMessage = "Share was successful. Your friends would receive an email in this regard.";
				ctrl.serviceUrl = proxyUrl+"/share_moments/addShare/";
				ctrl.isExport = false;
				var ac : ArrayCollection = HmmChaptersModel.getInstance().folderList;
				var breakOut : Boolean = false;
				for(var i : int = 0; i < ac.length; i++)
				{
					if(breakOut)
						break;
					var chapter : ChapterVO = ac[i] as ChapterVO;
					for(var j : int = 0; j<  chapter.subchapters.length; j++)
					{
						if(breakOut)
							break;
						var sub : SubChapterVO = chapter.subchapters[j] as SubChapterVO;
						for(var k : int = 0; k < sub.gallery.length; k++)
						{
							var gal : GalleryVO = sub.gallery[k] as GalleryVO;
							if(gal.id == galleryId)
							{
								breakOut = true;	
								break;
							}	
						}
					}
				}
				ctrl.treeData = gal as BaseVO;
				popUp.width = 655;//Application.application.stage.width*2/3;
				popUp.height = 350;//Application.application.stage.height*2/3;
				PopUpManager.centerPopUp(popUp);
				
				
				
			}
			
			private function handleExport() : void
			{
				var popUp : IFlexDisplayObject = PopUpManager.createPopUp(Application.application as DisplayObject, ExportControl, true);
				var ctrl : ExportControl = popUp as ExportControl;
				//ctrl.title = "Export to a friend.";
				ctrl.successMessage = "Export was successful. Your friends would receive an email in this regard.";
				ctrl.serviceUrl = proxyUrl+"/export_moments/exporter/";
				ctrl.isExport = true;
				var breakOut : Boolean = false;
				var ac : ArrayCollection = HmmChaptersModel.getInstance().folderList;
				for(var i : int = 0; i < ac.length; i++)
				{
					if(breakOut)
						break;
					var chapter : ChapterVO = ac[i] as ChapterVO;
					for(var j : int = 0; j<  chapter.subchapters.length; j++)
					{
						if(breakOut)
							break;
						var sub : SubChapterVO = chapter.subchapters[j] as SubChapterVO;
						for(var k : int = 0; k < sub.gallery.length; k++)
						{
							var gal : GalleryVO = sub.gallery[k] as GalleryVO;
							if(gal.id == galleryId)
							{
								breakOut = true;	
								break;
							}	 
						}
					}
				}
				ctrl.treeData = gal as BaseVO;
				popUp.width = 655;//Application.application.stage.width*2/3;
				popUp.height = 350;//Application.application.stage.height*2/3;
				//Alert.show("Width"+ Application.application.stage.width+ "  Height" +Application.application.stage.height);
				PopUpManager.centerPopUp(popUp);
			}
			 
			 private function handleJournal() : void
			{
				var req : URLRequest = new URLRequest("/gallery_journal/new/"+galleryId);
				navigateToURL(req, "_self");
			}
			
			private function handleDataResult(event : ResultEvent) : void
			{
				var myModel : HmmChaptersModel = new HmmChaptersModel();
				myModel.data = event.result.root;
				//subChapterId = event.result.subchapterid;
				//myModel.attachEventListeners(menu);
				//service.send(event.result.root);
				HmmChaptersModel.setInstance(myModel);
				buttonBox.enabled = true;
				
			}
			
		]]>
	</Script>
	<Style>
			.lastButtonStyle
			{
				fillColors: #000000, #000000, #000000, #cccccc;
				corner-radius : 0;
				selection-color : #ff6633;
				color : #Ffffff;
				theme-color : #ff6633;
			}
			
			Alert {
		    corner-radius: 8;
		    header-height: 27;
		    header-colors: #999999, #000000;
		    background-color: #000000;
		    color: #ffffff;
		    border-thickness: 4;
		    border-color: #000000;
		    panel-border-style: roundCorners;
		    shadow-distance: 4;
		    shadow-direction: bottom;
		    button-style-name: "firstButtonStyle";
		  }
		  
		   Tree
			{
				
				disclosureClosedIcon: ClassReference("Tree_disclosureClosedIcon");
				disclosureOpenIcon: ClassReference("Tree_disclosureOpenIcon");
				
			}
	</Style>
	<!--<VBox horizontalCenter="0" bottom="10"
		horizontalAlign="center" verticalAlign="middle"  >	 	

		<HBox>
			<Label text="Angle:" visible="true" color="#FFFFFF"/>
			<HSlider liveDragging="true" id="angle" maximum="75" value="28.6" minimum="{0}" snapInterval=".1" width="400" visible="true"/>
		</HBox>

		<HBox>
			<Label text="Selection:" visible="true" color="#FFFFFF"/>
			<HSlider liveDragging="true" id="sel" minimum="0" value="{dataSet.length/2}" maximum="{shelf.dataProvider.length}" snapInterval="1" width="400" visible="true"/>
		</HBox>

		<HBox>
			<Label text="pop:" visible="true" color="#FFFFFF"/>
			<HSlider liveDragging="true" id="pop" minimum="0" value=".17" maximum="1" snapInterval=".01" width="400" visible="true"/>
		</HBox>

	</VBox>-->
	
</Application>
